// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabel Pengguna
model User {
  id              Int       @id @default(autoincrement())
  name            String
  password        String
  email           String    @unique
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt

  // Relasi dengan komik yang dimiliki oleh pengguna
  comics          Comic[]

  // Relasi dengan reset password
  resetPasswords  ResetPassword[]

  // Relasi dengan notifikasi
  notifications   Notification[]

  // Relasi balik dengan tabel ProfilePicFile
  profilePic      ProfilePicFile?

  // Relasi favorite comic
  favoriteComics  FavoriteComic[]

  @@map("users")
}

// Tabel Komik
model Comic {
  id          Int      @id @default(autoincrement())
  title       String
  genres      Genre[]  // Menggunakan relasi many-to-many dengan tabel Genre
  chapter     Int?
  updateDay   Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  // Relasi dengan pengguna yang memiliki komik
  user        User @relation(fields: [userId], references: [id])
  userId      Int

  // Relasi Cover
  cover       CoverFile?

  // Relasi balik untuk FavoriteComic
  favorite    FavoriteComic[]

  @@map("comic")
}

// Tabel Genre
model Genre {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  comics      Comic[]   // Menggunakan relasi many-to-many dengan tabel Comic
}

// Tabel ProfilePicFile untuk menyimpan foto profil pengguna
model ProfilePicFile {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  size        Int
  url         String
  created_at  DateTime  @default(now())

  // Relasi dengan tabel User
  user        User?     @relation(fields: [userId], references: [id])

  // ID pengguna
  userId      Int? @unique

  @@map("profile_pic_files")
}

// Tabel CoverFile untuk menyimpan sampul komik
model CoverFile {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  size        Int
  url         String
  created_at  DateTime  @default(now())

  // Relasi dengan tabel Comic
  comic       Comic?    @relation(fields: [comicId], references: [id])

  // ID komik
  comicId     Int? @unique

  @@map("cover_files")
}

// Tabel Reset_Password
model ResetPassword {
  id            Int      @id @default(autoincrement())
  token         String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  // Relasi dengan pengguna
  user          User @relation(fields: [userId], references: [id])
  userId        Int

  @@map("reset_password")
}

// Model untuk notifikasi
model Notification {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())

  // Relasi dengan pengguna
  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  @@map("notifications")
}

// Tabel untuk log exception
model ExceptionLog {
  id          Int      @id @default(autoincrement())
  message     String
  stackTrace  String
  timestamp   DateTime @default(now())

  @@map("exception_log")
}

// Tabel FavoriteComic
model FavoriteComic {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  comic      Comic    @relation(fields: [comicId], references: [id])
  comicId    Int

  @@map("favorite_comic")
}


// Email schema
model Email {
  id          Int       @id @default(autoincrement())
  to          String    // Alamat email penerima
  subject     String    // Subjek email
  body        String    // Isi email
  createdAt   DateTime  @default(now()) // Waktu pembuatan email

  @@map("mail")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabel Pengguna
model User {
  id          Int      @id @default(autoincrement())
  name        String
  password    String
  email       String @unique
  comics       Comic[]
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  // Relasi terbalik dari ResetPassword
  resetPasswords ResetPassword[]
  notifications Notification[]
  dataLog DataLog[]


  @@map("users")
}

// Tabel Komik
model Comic {
  id            Int      @id @default(autoincrement())
  title         String
  genre         String?
  chapter       Int?
  updateDay     Int?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  // Relasi dengan Tabel Pengguna
  user          User @relation(fields: [userId], references: [id])
  userId        Int

  @@map("comic")
}

// Tabel Reset_Password
model ResetPassword {
  id            Int      @id @default(autoincrement())
  token         String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  // Relasi dengan Tabel Pengguna
  user          User @relation(fields: [idUser], references: [id])
  idUser        Int

  @@map("reset_password")
}

// Model untuk notifikasi
model Notification {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())

  // Relasi dengan pengguna
  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  @@map("notifications")
}

model DataLog {
  id         Int       @id @default(autoincrement())
  action     String
  entity     String
  data       Json
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  timestamp  DateTime  @default(now())

  @@map("data_log")
}

// Tabel untuk log exception
model ExceptionLog {
  id          Int      @id @default(autoincrement())
  message     String
  stackTrace  String
  timestamp   DateTime @default(now())

  @@map("exception_log")
}